<?php defined('BASEPATH') OR exit('No direct script access allowed');

require_once APPPATH . '/libraries/REST_Controller.php';
require_once APPPATH . '/libraries/JWT.php';
use \Firebase\JWT\JWT;

class Contacts extends REST_Controller {

  public function __construct() {
      parent::__construct();
      $this->load->model('Database_model');
  }

  public function data_post(){
    // $this->some_model->update_user( ... );
    $data = [
        'mobile' => $this->post('mobile'), // Automatically generated by the model
        'name'   => $this->post('name'),
        'email'  => $this->post('email'),
        'group'  => $this->post('group')
    ];

     $query = $this->Database_model->new_contact($data);

     $message = [
       "status" => TRUE,
       "msg"=> "Contact data created"
     ];

    //run the insert model here
      if($query === true){

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
      }
      else
      {
        $this->response([
            'status' => FALSE,
            'message' => 'Error creating contact'
        ], REST_Controller::HTTP_NOT_FOUND);
      }

  }


  public function data_put(){

      $id = $this->get('id');

      $data = [
          'mobile' => $this->put('mobile'), // Automatically generated by the model
          'name'   => $this->put('name'),
          'email'  => $this->put('email'),
          'group'  => $this->put('group')
      ];

      //now we check if the id exist first before running it through the Database
      //$query = $this->Database_model->check_id($id);


      if ($id != NULL)//if id is present
      {
        $query = $this->Database_model->update_contact_id($id,$data);
          // Check if the users data store contains users (in case the database result returns NULL)
          if ($query ===TRUE)

              // Set the response and exit
              $this->response([
                  'status' => TRUE,
                  'message' => 'Contact update Success'
              ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
          }

          else
          {
              // Set the response and exit
              $this->response([
                  'status' => FALSE,
                  'message' => 'Update failed'
              ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
          }

      }



  //lets run this first script
  public function data_get(){

    //here fetch all rows from the database
    $query  = $this->Database_model->all_contacts();

    $id = $this->get('id');

    // If the id parameter doesn't exist return all the users

    if ($id === NULL)
    {
        // Check if the users data store contains users (in case the database result returns NULL)
        if ($query)
        {
            // Set the response and exit
            $this->response($query, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'No contacts were found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }



    $id = (int) $id;

    // Validate the id.
    if ($id <= 0)
    {
        // Invalid id, set the response and exit.
        $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
    }


    // Get the user from the array, using the id as key for retrieval.
    // Usually a model is to be used for this.
    $query = $this->Database_model->get_contact_id($id);
    if($query){
      $this->response($query, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
    }
    else
    {
        // Set the response and exit
        $this->response([
            'status' => FALSE,
            'message' => 'Contact id not found'
        ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
    }



  }



  public function data_delete(){

    $id = (int) $this->get('id');

    // Validate the id.
    if ($id <= 0)
    {
        // Set the response and exit
        $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
    }

    // $this->some_model->delete_something($id);
    $query = $this->Database_model->delete_contact_id($id);
    $message = [
        'id' => $id,
        'message' => 'Deleted the resource'
    ];

    $this->set_response($message, REST_Controller::HTTP_OK); // NO_CONTENT (204) being the HTTP response code
  }
}
