<?php defined('BASEPATH') OR exit('No direct script access allowed');

require_once APPPATH . '/libraries/REST_Controller.php';
require_once APPPATH . '/libraries/JWT.php';
use \Firebase\JWT\JWT;

class Group extends REST_Controller {

    public function __construct() {
        parent::__construct();
        $this->load->model('Database_model');
        $this->load->model('Group_model', 'group');
        $this->load->model('Api_model','api');


    }


    public function check_key_post($key){
      //pass the data through json body
      //$params = json_decode(file_get_contents('php://input'), TRUE);
      $query = $this->api->get_api_key($key);
      if($query == true){
        $this->ajax_list();
      }else {

        $message = array(
          'status' => 0,
          'message'=> 'Unauthorized access'
        );
        //print_r($message);
      return $message;
      }
    }





    public  function ajax_list_post($key=NULL){

          if($key != NULL){
            $query = $this->api->get_api_key($key);
            if($query == false){
              $message = array(
                'status' => 403,
                'message'=> 'Unauthorized access'
              );
              $this->response($message, REST_Controller::HTTP_NOT_FOUND);
            }else{
              $this->group_data();
            }
          }else{
            $message = array(
              'status' => 0,
              'api_key'=> NULL,
              'message'=> 'Unauthorized access'
            );
            $this->response($message, REST_Controller::HTTP_OK);
          }
    }

    private function group_data(){

      $this->load->helper('url');
      $list = $this->group->get_datatables();
      $data = array();
      $no = $_POST['start'];
      foreach ($list as $group) {
          $no++;
          $row = array();
          $row[] = $group->groupName;
          /*$row[] = $profile->first_name;
          $row[] = $profile->other_name;
          $row[] = $profile->id_type;
          $row[] = $profile->id_number;
          $row[] = $profile->user_email;
          */
          //if( == 'MTN'):
          $row[] = '<a class="btn btn-sm btn-primary" href="javascript:void(0)" title="Edit" onclick="edit_group('."'".$group->id."'".')"><i class="fa fa-edit"></i> </a>
                    <a class="btn btn-sm btn-danger" href="javascript:void(0)" title="Hapus" onclick="delete_group('."'".$group->id."'".')"><i class="fa fa-trash"></i> </a>';

          $data[] = $row;
      }

      $output = array(
          "draw" => $_POST['draw'],
          "recordsTotal" => $this->group->count_all(),
          "recordsFiltered" => $this->group->count_filtered(),
          "data" => $data,
      );
      //output to json format
      //echo json_encode($output);
      //header content type pass json
      $this->response($output, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
  //  }
    }



    public function save_group_post($key){
        if($key != NULL){
          $query = $this->api->get_api_key($key);
          if($query == false){
            $message = array(
              'status' => 0,
              'message'=> 'Unauthorized access'
            );
            $this->response($message, REST_Controller::HTTP_NOT_FOUND);
          }else{

            $this->data_group();
          }
        }
        //this part run api is not even available
        else{
          $message = array(
            'status' => 0,
            'api_key'=> NULL,
            'message'=> 'Unauthorized access'
          );
          $this->response($message, REST_Controller::HTTP_OK);
        }
    }


    private function data_group(){
      // $this->some_model->update_user( ... );
      $_POST = json_decode(file_get_contents('php://input'), TRUE);

      // $data = [
      //     //'id' => 100, // Automatically generated by the model
      //     'groupName' => $_POST['group'],
      //     //'email' => $this->post('email'),
      //     'createdBy' => $_POST['by']
      // ];


    $data= array('success'=> false, 'messages' => array());
		$this->form_validation->set_rules('groupName', 'Group Label', 'trim|required|is_unique[groups.groupName]');
		$this->form_validation->set_error_delimiters('<span class=" text-danger">', '</span>');
		if ($this->form_validation->run() === FALSE)
        {
            //if validation returns false
            foreach($_POST as $key =>$value)
            {
                $data['messages'][$key] = form_error($key);
            }
        }else{

          $data = [
              //'id' => 100, // Automatically generated by the model
              'groupName' => $_POST['groupName'],
              //'email' => $this->post('email'),
              'createdBy' => $_POST['by']
          ];
          $query = $this->Database_model->new_group($data);
          //run the insert model here
            if($query == true){
              $data = [
                "success" => TRUE,
                "message"=> "Group data created"
              ];
               // CREATED (201) being the HTTP response code
            }

        	// $data['success'] = true;
        }
        $this->set_response($data, REST_Controller::HTTP_CREATED);


        // else
        // {
        //   $this->response([
        //       'status' => FALSE,
        //       'message' => 'Error creating group'
        //   ], REST_Controller::HTTP_NOT_FOUND);
        // }
    }








    public function data_group_post($api){

      $query =   $this->check_api_exist($api);

      //print_r($query);
      if($query->status == 403){

        $this->response($query, REST_Controller::HTTP_NOT_FOUND);

      }else{

        $id = $this->get('id');

        $_POST = json_decode(file_get_contents('php://input'), TRUE);

        $data = [
          //'id' => 100, // Automatically generated by the model
          'groupName' => $_POST['group'],
          //'email' => $this->post('email'),
          'createdBy' => $_POST['by']
        ];

        //now we check if the id exist first before running it through the Database
        //$query = $this->Database_model->check_id($id);


        if ($id != NULL)//if id is present
        {
          $query = $this->Database_model->update_group_id($id,$data);
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($query == TRUE)

                // Set the response and exit
                $this->response([
                    'status' => TRUE,
                    'message' => 'Group Update Success'
                ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
      
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'Group Update failed'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
      }





    }//end curly braces






    //lets run this first script
    public function data_get(){

      //here fetch all rows from the database
      $query  = $this->Database_model->all_groups();

      $id = $this->get('id');

      // If the id parameter doesn't exist return all the users

      if ($id === NULL)
      {
          // Check if the users data store contains users (in case the database result returns NULL)
          if ($query)
          {
              // Set the response and exit
              $this->response($query, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
          }
          else
          {
              // Set the response and exit
              $this->response([
                  'status' => FALSE,
                  'message' => 'No groups were found'
              ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
          }
      }



      $id = (int) $id;

      // Validate the id.
      if ($id <= 0)
      {
          // Invalid id, set the response and exit.
          $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
      }


      // Get the user from the array, using the id as key for retrieval.
      // Usually a model is to be used for this.
      $query = $this->Database_model->get_group_id($id);
      if($query){
        $this->response($query, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
      }
      else
      {
          // Set the response and exit
          $this->response([
              'status' => FALSE,
              'message' => 'Group id not found'
          ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
      }



    }



    public function data_delete(){

      $id = (int) $this->get('id');

      // Validate the id.
      if ($id <= 0)
      {
          // Set the response and exit
          $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
      }

      // $this->some_model->delete_something($id);
      $query = $this->Database_model->delete_group_id($id);
      $message = [
         'staus'=> true,
          'id' => $id,
          'message' => 'Deleted the resource'
      ];

      $this->set_response($message, REST_Controller::HTTP_OK); // NO_CONTENT (204) being the HTTP response code
    }


    //api authentication
    function check_api_exist($key){
      if($key != NULL){
        $query = $this->api->get_api_key($key);
        if($query == false){
          $message = array(
            'status' => 403,
            'message'=> 'Unauthorized access'
          );

        } else {
          $message = array(
            'status' => 200,
            'message'=> 'Valid Api'
          );
        }

        return $message;


    }
}
}
